What happens when you initialize a repository? Why do you need to do it?

    I can initialize a repository in a folder by using "git init". This creates a hidden .git file which can contain metadata.
    For our purposes this metadata will be commits. I can at all time check the status of commits by using "git status".
    Moreover, I have learned that I can use "mkdir foldername" to create a directory and "touch textfile.txt" to create a textfile
    within that directory.

    Initializing a repository is important in order to add commits to it!!!

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is the stage between the working directory and the repository. We can add files into the staging area with "git add filename"
    and we can delete files out of the staging area without deleting it from the working directory with "git reset filename". The command
    "git status" is pretty powerful as it shows us which files are in the staging area and which ones aren't.

    The value of the staging area is that all files in that staging area can be commited simultaneously in the repository.

How can you use the staging area to make sure you have one commit per logical
change?

    This is the process once a repository has been initialized:

    1. Use "git add filename" to add a file or multiple files to the staging area

    2. Use "git diff" (without Id's) to compare the working directory and the staging area

    3. Make sure that you checkout the most recent file in the repository by means of "git checkout master"

    NOTE: checkout of most recent commit in master branch (more about branches later in this lesson)

    4. Use "git diff --staged" to compare the difference between the versions within the staging area and the repository (most recent commit)

    5. Use "git commit" to commit all files in the staging area into the repository

    Once you went through this process you can go again through this process to commit a logically different file or change!!!

    NOTE: you can use "git reset --hard" if you decide that you which to reset the changes made in the working directory and staging area
    This in fact means that the staging area will be empty! This is irreversible, so be careful with that command!

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    First I wish to discuss how to create branches:

    1. Use "git branch branchname" to create a new branch
    2. Use "git branch" to see all existing branches
    3. Use "git checkout branchname" to check out the chosen branch
    4. Now you can commit into the chosen branch without editing the masterbranch

    NOTE: Use "git checkout -b newbranchname" to do step 1 and 3 simultaneously.

    Branches are very useful in case you wish to keep an original version easily, for example when making a version in another language.

How do the diagrams help you visualize the branch structure?

    To visualize the branch structure in git, one can use the command "git log --graph --oneline master branchname1 branchname2" for example.
    Once the diagram is visible one can easily see what commit is linked to what branch.

    Keeping a diagram of the branch structure as you make it is useful such that it becomes clear which branches are reachable and which ones aren't.

    NOTE: A parent commit is only reachable by its children in a branch. It is not possible to reach a child commit in another branch when being checked out in a child commit. (See Reachability in videos)

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    We can merge two branches with "git merge branchname1 branchname2" such that branch2 will be add into branch1 based on the origin of both branches.
    We can then delete for instance branch2 by means of "git branch -d branchname2"

    Merging branches is very powerful because it actually allows you to combine two different paths of changes into one commit!
    We represent it in the diagram the way we do, because this allows us to see which commits are reachable by the merged commit/branch.

    NOTE: Use "git gc" (gc = garbage collection) to manually delete the unreachable commits.
    NOTE: Use "git merge --abort" to go back to the state before the merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Automerging:    1. git's automatic merging is awesome, since it allows you to merge without having to much to worry about
                    2. the backlash is that it could be that there is some unfavorable code that comes along with it, but if the programmers working on the project are great at what they do this disadvantage is negligible.

    Manual Merging  1. manual merging happens when two branches are different, but in a way that git's machine learning algorithm can't figure out what to do.
                    Git then shows you where this merging conflict occurs such that you can manually decide what to do. This is a good thing, rather than git making errors all the time.
                    2. Manual merging takes more time though.

    NOTE: it is important to commit (working directory => staging area => repository) to the manual merge in order to ensure that it is permanent.
    NOTE: use 'git log -n amountOfVisibleCommits' to only see the most recent commits




COMMIT MESSAGE TYPES

    The Type
    The type is contained within the title and can be one of these types:

    feat: a new feature
    fix: a bug fix
    docs: changes to documentation
    style: formatting, missing semi colons, etc; no code change
    refactor: refactoring production code
    test: adding tests, refactoring test; no production code change
    chore: updating build tasks, package manager configs, etc; no production code change

USING GITHUB

    To push your repository to your github account do the following:

    1. Go to the directory with the files you wish to push to Github
    1bis. Create a new repository on Github
    2. Use "git remote add origin(or other name) https://github.com/..."
    3. You just created a remote repository on Github that you can view with "git remote"
    4. Use "git push origin master" to push the master branch to the origin repository!
    5. Fill in Github username and password
    6. Find your files in the newly created repository in Github