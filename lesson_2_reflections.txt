What happens when you initialize a repository? Why do you need to do it?

    I can initialize a repository in a folder by using "git init". This creates a hidden .git file which can contain metadata.
    For our purposes this metadata will be commits. I can at all time check the status of commits by using "git status".
    Moreover, I have learned that I can use "mkdir foldername" to create a directory and "touch textfile.txt" to create a textfile
    within that directory.

    Initializing a repository is important in order to add commits to it!!!

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is the stage between the working directory and the repository. We can add files into the staging area with "git add filename"
    and we can delete files out of the staging area without deleting it from the working directory with "git reset filename". The command
    "git status" is pretty powerful as it shows us which files are in the staging area and which ones aren't.

    The value of the staging area is that all files in that staging area can be commited simultaneously in the repository.

How can you use the staging area to make sure you have one commit per logical
change?

    This is the process once a repository has been initialized:
    1. Use "git add filename" to add a file or multiple files to the staging area
    2. Use "git diff" (without Id's) to compare the working directory and the staging area
    3. Make sure that you checkout the most recent file in the repository by means of "git checkout master"
    4. Use "git diff --staged" to compare the difference between the versions within the staging area and the repository (most recent commit)
    5. Use "git commit" to commit all files in the staging area into the repository

    Once you went through this process you can go again through this process to commit a logically different file or change!!!

    NOTE: you can use "git reset --hard" if you decide that you which to reset the changes made in the working directory and staging area
    This in fact means that the staging area will be empty! This is irreversible, so be careful with that command!

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?


COMMIT MESSAGE TYPES

    The Type
    The type is contained within the title and can be one of these types:

    feat: a new feature
    fix: a bug fix
    docs: changes to documentation
    style: formatting, missing semi colons, etc; no code change
    refactor: refactoring production code
    test: adding tests, refactoring test; no production code change
    chore: updating build tasks, package manager configs, etc; no production code change