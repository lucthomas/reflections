When would you want to use a remote repository rather than keeping all your work
local?

    A remote repository seems pretty awesome for collaboration. I place my commits and files on Github and somebody
    else can do this as well. As such the Github repository represents the complete work. I can imagine that Github
    allows me to pull files of others to place it on my local pc such that I can interact with them without changing
    the work of my colleagues.

    See all about "git remote" and "git push" in lesson 2

    NOTE: In order to pull files from Github to Git you can use "git pull origin(or chosen remoteName) master(or chosen branchName)".

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    This might fill up memory space on your local pc that is not necessary.

    NOTE: use "touch filename.txt or .html, etc." to add a file in a folder

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forking: the act of pressing fork button in Github concerning someone else's repository. This then leads to this repository being cloned
    to your github account. But it is not cloned to your local pc.

    Cloning: cloning by means of "git clone https://github.com/..." is a means of cloning a repository from Github to your local pc such that
    you can interact with it with your Git.

    Branches: these are different versions (commits) of your files branched out in different branches such that you can easily transition from
    one version to the other without knowing the Id's of the versions.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    First of all, it is important to understand that "git pull origin master" = "git fetch origin" (fetching the master head of Github and locally adding this master head as a commit called origin/master) + "git merge origin/master master" (merge the origin/master commit with the local master head commit into a new commit)

    A copy of the last known state of the remote allows you to compare the last commit of the remote (Github; called origin/master) and the last one of the local (Git; called master). Finally it also allows to merge and to decide upon a possible merge conflict on how to change the code or the message.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    A pull request or merge pull request is in fact something you can do on Github when having created another branch, updated a file in that branch, committed it and pushed it to Github. The pull request is actually a request to one or all of your collaborators. An email is then send to them and they can react on your merge request. If they agree, they can merge the new branch into the master. Else they can comment on your work.

    Collaboration without Git and Github seems hard, definitely in regards to code. I have had so much trouble in the past comparing my code with the one of school mates. Git(hub) rules!!!
    The hard part is learning Git and Github. Everybody in your team needs to be able to interact with it!

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.

    Making changes in a separate branch allows you to go back to the original in master easily. However, there is the above added complexity when working with other
    branches.
